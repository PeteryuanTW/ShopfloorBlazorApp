@rendermode InteractiveServer
@inject ShopfloorServiceDataService shopfloorServiceDataService

<DxPopup HeaderText="Error Message" @bind-Visible="@showErrorMsg" BodyText="@stationBase.errorMsg" CloseOnOutsideClick="false" />
@code {
    [Parameter]
    public StationConfig StationConfig { get; set; }
    protected StationBase stationBase;
    protected bool canedit => stationBase.stationState == StationState.Uninit;
    protected bool canrun => stationBase.stationState == StationState.Uninit;
    protected bool canoperate => stationBase.stationState == StationState.Running;
    protected bool canpause => stationBase.stationState == StationState.Running;
    protected bool canstop => stationBase.stationState == StationState.Running;
    protected bool canretry => stationBase.stationState == StationState.Stop || stationBase.stationState == StationState.Error || stationBase.stationState == StationState.Pause;
    protected bool iserror => stationBase.stationState == StationState.Error;

    public bool showErrorMsg = false;
    public bool showOperation = false;

    //public List<WorkOrder> workOrderCandidates = new();//GetWorkOrdersByProcessAndStatus
    public List<StationWorkOrderPartDetail> workOrderDetailCandidates = new();
    public List<string> workOrderCandidates = new();// => workOrderDetailCandidates.DistinctBy(x => x.WorkOrderNo).Select(x => x.WorkOrderNo).ToList();

    public Action? act;

    protected override async Task OnInitializedAsync()
    {
        stationBase = shopfloorServiceDataService.GetStationBaseByConfig(StationConfig);
        await UpdateParametersList();
        shopfloorServiceDataService.StationChangedAct += StationBaseStateChanged;
        shopfloorServiceDataService.SingleWorkOrderDetailsAmountChangedAct += stationBase.StationWorkOrderPartDetailUpdate;
        stationBase.UpdateUIAct += UIUpdate;
        stationBase.UpdateParameterListsAct += (async () => { await UpdateParametersList(); });
    }

    private async Task UpdateParametersList()
    {
        workOrderDetailCandidates = await shopfloorServiceDataService.GetStatusStartedWorkOrderDetailsByStationName(StationConfig.Name, new List<int> { 0, 1 });
        workOrderCandidates = (await shopfloorServiceDataService.GetWorkOrdersByStatus(new List<int> { 1 })).Select(x=>x.WorkOrderNo).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public void ShowErrorPopup()
    {
        showErrorMsg = true;
        InvokeAsync(StateHasChanged);
    }

    protected virtual void ShowOperationPopup()
    {
        showOperation = true;
    }

    public void CloseOperationPopup()
    {
        showOperation = false;
        StateHasChanged();
    }

    private async void StationBaseStateChanged(StationBase newStationBase)
    {
        if (newStationBase.name == StationConfig.Name)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void UIUpdate()
    {
        InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }

    protected ButtonRenderStyle GetStatusStyle()
    {
        switch (stationBase.stationState)
        {
            case StationState.Uninit:
                return ButtonRenderStyle.Secondary;
            case StationState.Running:
                return ButtonRenderStyle.Success;
            case StationState.Pause:
                return ButtonRenderStyle.Warning;
            case StationState.Stop:
            case StationState.Error:
                return ButtonRenderStyle.Danger;
            default:
                return ButtonRenderStyle.None;
        }
    }

    protected string GetPanelStatusStyle()
    {
        switch (stationBase.stationState)
        {
            case StationState.Uninit:
                return "uninit";
            case StationState.Running:
                return "running";
            case StationState.Pause:
                return "pause";
            case StationState.Stop:
            case StationState.Error:
                return "stop";
            default:
                return "uninit";
        }
    }

}
