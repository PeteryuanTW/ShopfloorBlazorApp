@inherits StationBaseComponent
@inject IStringLocalizer<Lang> localizer
@inject ShopfloorServiceDataService shopfloorServiceDataService

<div class="card shadow panel @GetPanelStatusStyle()">
    @if (StationConfig != null && stationBase != null)
    {
        <DxGridLayout>
            <Rows>
                <DxGridLayoutRow Areas="name status" Height="15%" />
                <DxGridLayoutRow Areas="info info" Height="65%" />
                <DxGridLayoutRow Areas="actionbtn actionbtn" Height="20%" />
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="70%" />
                <DxGridLayoutColumn Width="30%" />
            </Columns>
            <Items>
                <DxGridLayoutItem Area="name">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Text="@stationSingleOrderWithoutPartNO.name" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline"></DxButton>
                            <DxButton IconCssClass="oi oi-media-stop" Enabled="false" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Text" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton IconCssClass="oi oi-menu" Enabled="false" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Text" SizeMode="SizeMode.Large"></DxButton>

                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="status">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Text="@($"{localizer[stationSingleOrderWithoutPartNO.stationState.ToString()]}")" RenderStyle="@GetStatusStyle()"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="info">
                    <Template>
                        <div class="containeralignmid p-3">
                            <DxFormLayout>
                                <DxFormLayoutItem Caption="@($"{localizer["Process"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxTextBox ReadOnly="true" Text="@stationSingleOrderWithoutPartNO.procedureName"></DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="@($"{localizer["Workorder"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxComboBox ReadOnly="@(!canedit)" Data="@workOrderCandidates" Value="@stationSingleOrderWithoutPartNO.workorder" ValueChanged="((string workorderNO)=>SetWorkorderAndTask(workorderNO))">
                                    </DxComboBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="@($"{localizer["WIP"]}")"  ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                    <DxSpinEdit ReadOnly="true" Value="@stationSingleOrderWithoutPartNO.currentAmount"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="@($"{localizer["Target"]}")" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                    <DxSpinEdit ReadOnly="true" Value="@stationSingleOrderWithoutPartNO.targetAmount"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="@($"{localizer["OK"]}")" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                    <DxSpinEdit ReadOnly="true" Value="@stationSingleOrderWithoutPartNO.OKAmount"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="@($"{localizer["NG"]}")" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                    <DxSpinEdit ReadOnly="true" Value="@stationSingleOrderWithoutPartNO.NGAmount"></DxSpinEdit>
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="actionbtn">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Enabled="@(canrun && stationSingleOrderWithoutPartNO.hasWorkOrder)" Click="@(()=>RunWorkorder())" IconCssClass="oi oi-media-play" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@canoperate" Click="@(()=>ShowOperationPopup())" IconCssClass="oi oi-clipboard" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@canpause" Click="@(()=>stationSingleOrderWithoutPartNO.Pause())" IconCssClass="oi oi-media-pause" RenderStyle="ButtonRenderStyle.Warning" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@canstop" Click="@(()=>FinishWorkorder())" IconCssClass="oi oi-media-stop" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@canretry" Click="@(()=>stationSingleOrderWithoutPartNO.Reset())" IconCssClass="oi oi-reload" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@iserror" Click="@(()=>ShowErrorPopup())" IconCssClass="oi oi-ellipses" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
        <DxPopup HeaderText="Operations" @bind-Visible="@showOperation" CloseOnOutsideClick="false">
            <BodyContentTemplate>
                <DxTabs>
                    <DxTabPage Text="@($"{localizer["Station In"]}")">
                        @{
                            <DxFormLayout>
                                <DxFormLayoutItem Caption="@($"{localizer["Amount"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12" Context="inamountcontext">
                                    <DxSpinEdit @bind-Value="@inAmount"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12" Context="stationincontext">
                                    <DxButton Text="@($"{localizer["Run"]}")" Click="StationIn"></DxButton>
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        }
                    </DxTabPage>
                    <DxTabPage Text="@($"{localizer["Station Out"]}")">
                        @{
                            <DxFormLayout>
                                <DxFormLayoutItem Caption="@($"{localizer["OK"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6" Context="okamountcontext">
                                    <DxSpinEdit @bind-Value="@okAmount"></DxSpinEdit>
                                </DxFormLayoutItem><DxFormLayoutItem Caption="@($"{localizer["NG"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6" Context="ngamountcontext">
                                    <DxSpinEdit @bind-Value="@ngAmount"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12" Context="stationoutcontext">
                                    <DxButton Text="@($"{localizer["Run"]}")" Click="StationOut"></DxButton>
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        }
                    </DxTabPage>
                </DxTabs>
            </BodyContentTemplate>
        </DxPopup>
    }
    else
    {

    }
</div>

@code {
    private StationSingleOrderWithoutPartNO stationSingleOrderWithoutPartNO => (StationSingleOrderWithoutPartNO)stationBase;


    int inAmount = 0;
    int okAmount = 0;
    int ngAmount = 0;

    private void ResetAmount()
    {
        inAmount = 0;
        okAmount = 0;
        ngAmount = 0;
    }

    private async Task SetWorkorderAndTask(string workorderNO)
    {
        stationSingleOrderWithoutPartNO.ClearWorkOrder();
        await shopfloorServiceDataService.SetWorkorderByStationName(stationSingleOrderWithoutPartNO.stationName, workorderNO);
        // await shopfloorServiceDataService.SetTaskByStationName(stationSingleOrderWithoutPartNO.stationName, stationWorkOrderPartDetail);
    }

    private async void RunWorkorder()
    {
        stationSingleOrderWithoutPartNO.Run();
        //await shopfloorServiceDataService.StationStartWorkOrder(stationSingleOrderWithoutPartNO.stationName, stationSingleOrderWithoutPartNO.stationWorkOrderPartDetail.WorkOrderNo);
    }

    protected override void ShowOperationPopup()
    {
        ResetAmount();
        base.ShowOperationPopup();
    }


    private async void StationIn()
    {
        //stationSingleOrderWithoutPartNO.StationIn(inAmount);
        //await shopfloorServiceDataService.UpdateWorkOrderDetailsAmount(stationSingleOrderWithoutPartNO.stationWorkOrderPartDetail);
        RequestResult res =  await shopfloorServiceDataService.StationInByName(stationSingleOrderWithoutPartNO.stationName, inAmount);
        //Console.WriteLine(res.msg);
        CloseOperationPopup();
    }

    private async void StationOut()
    {
        // stationSingleOrderWithoutPartNO.StationOut(okAmount, ngAmount);
        // await shopfloorServiceDataService.UpdateWorkOrderDetailsAmount(stationSingleOrderWithoutPartNO.stationWorkOrderPartDetail);
        RequestResult res = await shopfloorServiceDataService.StationOutByName(stationSingleOrderWithoutPartNO.stationName, okAmount, ngAmount);
        //Console.WriteLine(res.msg);
        CloseOperationPopup();
    }

    private async void FinishWorkorder()
    {
        stationSingleOrderWithoutPartNO.Stop();
        await shopfloorServiceDataService.StationFinishWorkOrder(stationSingleOrderWithoutPartNO.stationName, stationSingleOrderWithoutPartNO.stationWorkOrderPartDetail.WorkOrderNo);
        CloseOperationPopup();
    }

}
